name: Continuous Persistent VPS with Pterodactyl

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  vps-session:
    runs-on: ubuntu-latest
    timeout-minutes: 350

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set hostname to biralo
        run: sudo hostnamectl set-hostname biralo

      - name: Download VPS backup (if any)
        uses: actions/download-artifact@v4
        with:
          name: vps-backup
          path: ./backup
        continue-on-error: true

      - name: Install prerequisites
        run: |
          sudo apt update
          sudo apt install -y tmate curl unzip sudo net-tools neofetch software-properties-common lsb-release ca-certificates apt-transport-https gnupg

      - name: Install Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh

      - name: Restore backup files
        run: |
          if [ -f ./backup/backup.zip ]; then
            unzip -o ./backup/backup.zip -d /
          else
            echo "No backup found, starting fresh"
          fi

      - name: Restore Tailscale state
        run: |
          if [ -f /opt/vps-backup/data/tailscaled.state ]; then
            sudo mkdir -p /var/lib/tailscale
            sudo cp /opt/vps-backup/data/tailscaled.state /var/lib/tailscale/tailscaled.state
            sudo chmod 600 /var/lib/tailscale/tailscaled.state
          fi

      - name: Start Tailscale
        run: |
          sudo tailscaled &
          sleep 8
          sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --hostname=biralo || echo "Tailscale already up"
          echo "Tailscale IPv4:"
          tailscale ip -4 || echo "Not found"

      - name: Create user biralo with sudo
        run: |
          if ! id -u biralo >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash biralo
            echo "biralo:biralo" | sudo chpasswd
            sudo usermod -aG sudo biralo
            echo "biralo ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/biralo
          fi

      - name: Install PHP 8.3 and dependencies
        run: |
          sudo add-apt-repository ppa:ondrej/php -y
          sudo apt update
          sudo apt install -y php8.3 php8.3-cli php8.3-gd php8.3-mysql php8.3-mbstring php8.3-bcmath php8.3-xml php8.3-curl \
            mariadb-server mariadb-client redis-server unzip tar curl nginx composer docker.io docker-compose

      - name: Configure MySQL
        run: |
          sudo service mysql start
          sudo mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'biralo'; FLUSH PRIVILEGES;"

      - name: Install Pterodactyl Panel
        run: |
          cd /var/www
          sudo mkdir -p pterodactyl
          sudo chown -R $USER:$USER pterodactyl
          cd pterodactyl
          curl -Lo panel.tar.gz https://github.com/pterodactyl/panel/releases/latest/download/panel.tar.gz
          tar -xzvf panel.tar.gz
          cp .env.example .env
          composer install --no-dev --optimize-autoloader
          php artisan key:generate --force
          php artisan p:environment:setup \
            --url="http://$(tailscale ip -4 | head -n1)" \
            --timezone="UTC" \
            --cache="redis" \
            --session="redis" \
            --queue="redis" \
            --driver="mysql" \
            --host="127.0.0.1" \
            --port="3306" \
            --database="panel" \
            --username="root" \
            --password="biralo" \
            --email="admin@example.com"
          sudo mysql -uroot -pbiralo -e "CREATE DATABASE panel;"
          php artisan migrate --seed --force
          sudo chown -R www-data:www-data /var/www/pterodactyl
          sudo systemctl enable redis-server
          sudo systemctl restart redis-server
          sudo tee /etc/nginx/sites-available/pterodactyl <<EOF
server {
    listen 80;
    server_name _;

    root /var/www/pterodactyl/public;
    index index.php;

    location / {
        try_files \$uri \$uri/ /index.php?\$query_string;
    }

    location ~ \.php\$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/var/run/php/php8.3-fpm.sock;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        include fastcgi_params;
    }
}
EOF
          sudo ln -sf /etc/nginx/sites-available/pterodactyl /etc/nginx/sites-enabled/
          sudo systemctl restart nginx

      - name: Create Pterodactyl admin user
        run: |
          cd /var/www/pterodactyl
          php artisan p:user:make \
            --email="virathero9840@gmail.com" \
            --username="98984040Heroo_" \
            --name-first="Virat" \
            --name-last="Raj" \
            --password="BlackHero" \
            --admin=1

      - name: Install Wings
        run: |
          curl -Lo wings https://github.com/pterodactyl/wings/releases/latest/download/wings_linux_amd64
          chmod +x wings
          sudo mv wings /usr/local/bin/wings
          sudo mkdir -p /etc/pterodactyl
          sudo tee /etc/systemd/system/wings.service <<EOF
[Unit]
Description=Pterodactyl Wings
After=docker.service
Requires=docker.service

[Service]
User=root
WorkingDirectory=/etc/pterodactyl
LimitNOFILE=4096
ExecStart=/usr/local/bin/wings
Restart=on-failure
StartLimitInterval=180
StartLimitBurst=30

[Install]
WantedBy=multi-user.target
EOF
          sudo systemctl daemon-reload
          sudo systemctl enable wings

      - name: Start tmate session for SSH access
        uses: mxschmitt/action-tmate@v3

      - name: Sleep to keep VPS alive
        run: sleep 21600

      - name: Backup VPS data
        run: |
          sudo mkdir -p /opt/vps-backup/data
          sudo cp /var/lib/tailscale/tailscaled.state /opt/vps-backup/data/
          sudo chown -R $USER:$USER /opt/vps-backup
          zip -r backup.zip /opt/vps-backup

      - name: Upload VPS backup artifact
        uses: actions/upload-artifact@v4
        with:
          name: vps-backup
          path: backup.zip
